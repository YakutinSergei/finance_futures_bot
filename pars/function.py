import json
import time
import datetime
from typing import Dict, List
import logging
from aiogram.exceptions import TelegramAPIError

from ConfigData.redis import redis_client
# from ConfigData.redis import get_redis_data
from create_bot import bot
from data_base.lexicon import message_text, buttons_text
from data_base.orm import get_users_alerts
from keyboards.inline_keyboards import kb_pair_coinglass

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def check_alerts(
        users: List[Dict],
        redis_data: Dict[str, Dict],
):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        logger.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤")
        if not users:
            logger.warning("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç")
            return

        if not redis_data:
            logger.warning("–î–∞–Ω–Ω—ã–µ –∏–∑ Redis –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return

        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ {len(redis_data)} –ø–∞—Ä –∏–∑ Redis")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        current_datetime = datetime.datetime.now()
        current_time_str = current_datetime.strftime("%H:%M")

        for user in users:
            if user['role'] != 'free':
                try:
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if not all(key in user for key in ['time_interval', 'percent_up', 'percent_down', 'telegram_id']):
                        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user}")
                        continue

                    time_int = user['time_interval']
                    percent_up = user['percent_up']
                    percent_down = user['percent_down']
                    telegram_id = user['telegram_id']
                    lang = user['lang']

                    # –í—ã—á–∏—Å–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è (—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è - time_int –º–∏–Ω—É—Ç)
                    historical_datetime = current_datetime - datetime.timedelta(minutes=time_int)
                    historical_time_str = historical_datetime.strftime("%H:%M")

                    for pair, prices in redis_data.items():
                        try:
                            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                            current_price_data = prices.get(current_time_str)
                            if not current_price_data or len(current_price_data) < 1 or current_price_data[0] == 0:
                                logger.debug(f"–ù–µ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è –ø–∞—Ä—ã {pair} –≤ {current_time_str}")
                                continue

                            current_price = current_price_data[0]

                            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Ü–µ–Ω—É
                            historical_price_data = prices.get(historical_time_str)
                            if not historical_price_data or historical_price_data[0] == 0:
                                logger.debug(
                                    f"–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Ü–µ–Ω—ã –¥–ª—è –ø–∞—Ä—ã {pair} –∑–∞ {time_int} –º–∏–Ω (–∏—â–µ–º {historical_time_str})")
                                continue

                            historical_price = historical_price_data[0]

                            # –†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
                            try:
                                change_percent = ((current_price - historical_price) / historical_price) * 100
                            except ZeroDivisionError:
                                logger.error(f"–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –¥–ª—è –ø–∞—Ä—ã {pair}")
                                continue

                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
                            try:
                                if change_percent >= percent_up:
                                    message = (
                                        f"üè¶ Binance - ‚è±Ô∏è {time_int}M - <code>{pair}</code>\n"
                                        f"üîÑ {buttons_text['Percentage_of_growth'][f'{lang}']}:‚¨ÜÔ∏è {change_percent:.2f}%\n"
                                        f"üíµ {message_text['Current_Price'][f'{lang}']}: {current_price}"
                                    )
                                    await bot.send_message(
                                        chat_id=telegram_id,
                                        text=message,
                                        reply_markup=await kb_pair_coinglass(pair)
                                    )
                                    logger.info(f"–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Ä–æ—Å—Ç–µ {pair} –¥–ª—è {telegram_id}")

                                elif change_percent <= -percent_down:
                                    message = (
                                        f"üè¶ Binance - ‚è±Ô∏è {time_int}M - <code>{pair}</code>\n"
                                        f"üîÑ {buttons_text['Drawdown_percentage'][f'{lang}']}: ‚¨áÔ∏è{change_percent:.2f}%\n"
                                        f"üíµ {message_text['Current_Price'][f'{lang}']}: {current_price}"
                                    )
                                    await bot.send_message(
                                        chat_id=telegram_id,
                                        text=message,
                                        reply_markup=await kb_pair_coinglass(pair)
                                    )
                                    logger.info(f"–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ø–∞–¥–µ–Ω–∏–∏ {pair} –¥–ª—è {telegram_id}")

                            except TelegramAPIError as e:
                                logger.error(f"–û—à–∏–±–∫–∞ Telegram –¥–ª—è {telegram_id}: {str(e)}")
                                break
                            except Exception as e:
                                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")

                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä—ã {pair}: {str(e)}", exc_info=True)

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('telegram_id', 'unknown')}: {str(e)}",
                                 exc_info=True)

    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ check_alerts: {str(e)}", exc_info=True)
    finally:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤")


# async def monitor_prices():
#     """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
#     while True:
#         try:
#             logger.info("–ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω")
#
#             # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
#             try:
#                 users = await get_users_alerts()
#                 logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î")
#             except Exception as e:
#                 logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î: {e}")
#                 users = []
#
#             # 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Redis
#             try:
#                 redis_data = await get_redis_data()
#                 logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(redis_data)} –ø–∞—Ä –∏–∑ Redis")
#             except Exception as e:
#                 logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Redis: {e}")
#                 redis_data = {}
#
#             # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
#             if users and redis_data:
#                 await check_alerts(users, redis_data)
#             else:
#                 logger.warning("–ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö")
#
#         except asyncio.CancelledError:
#             logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
#             break
#         except Exception as e:
#             logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ monitor_prices: {e}", exc_info=True)
#         finally:
#             # –û–∂–∏–¥–∞–µ–º 1 –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
#             try:
#                 logger.info("–û–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏...")
#                 await asyncio.sleep(60)
#             except asyncio.CancelledError:
#                 logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
#                 break
#             except Exception as e:
#                 logger.critical(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏: {e}")
#                 await asyncio.sleep(60)  # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏


def is_valid_period(text: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 30

    :param text: –í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    :return: True –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º, –∏–Ω–∞—á–µ False
    """
    try:
        number = int(text)
        return 1 <= number <= 30
    except ValueError:
        return False


def validate_percent_input(text: str) -> tuple[bool, float | None, str | None]:
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏

    :param text: –í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç
    :return: (–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å, —á–∏—Å–ª–æ –∏–ª–∏ None, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ None)
    """
    try:
        value = float(text)
    except ValueError:
        return False, None, "not_a_number"

    if value < 2.0:
        return False, None, "too_small"
    elif value > 100.0:
        return False, None, "too_large"

    return True, value, None

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
def get_nearest_available_price(prices, target_time):
    """–ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Redis, –º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥"""
    closest_time = target_time
    max_retries = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (10 —Å–µ–∫—É–Ω–¥)

    for _ in range(max_retries):
        if closest_time in prices:
            return closest_time
        # –£–º–µ–Ω—å—à–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–¥–Ω—É —Å–µ–∫—É–Ω–¥—É
        closest_time = (datetime.datetime.strptime(closest_time, "%H:%M:%S") - datetime.timedelta(seconds=1)).strftime("%H:%M:%S")

    return None  # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤—Ä–µ–º—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 10 —Å–µ–∫—É–Ω–¥, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None


async def check_alert_for_user(alert_dict: dict, pair: str, prices: dict, price_now: float):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –¥–∞–Ω–Ω–æ–π –ø–∞—Ä–µ.
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∏ —Ü–µ–Ω—É N –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ.

    :param alert_dict: —Å–ª–æ–≤–∞—Ä—å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –¥–∞–Ω–Ω—ã–µ –æ–± –∞–ª–µ—Ä—Ç–µ
    :param pair: –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä "BTCUSDT"
    :param prices: —Å–ª–æ–≤–∞—Ä—å –∏–∑ Redis —Ñ–æ—Ä–º–∞—Ç–∞ { "HH:MM:SS": [price, %change] }
    """
    user_data = alert_dict['user']  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    telegram_id = user_data['telegram_id']
    lang = user_data['language']
    time_interval = alert_dict['time_interval']
    percent_up = alert_dict['percent_up']
    percent_down = alert_dict['percent_down']

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏—Ö –ø–∞—Ä–∞—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Redis
    user_alert_key = f"{telegram_id}_alerts"  # –ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏—Ö –ø–∞—Ä–∞—Ö
    user_alerts = await redis_client.get(user_alert_key)

    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
    if user_alerts:
        user_alerts = json.loads(user_alerts)
    else:
        user_alerts = {}

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ —ç—Ç–∞ –ø–∞—Ä–∞ —É–∂–µ –±—ã–ª–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–∏–Ω—É—Ç
    current_time = time.time()  # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    if pair in user_alerts:
        last_check_time = user_alerts[pair]
        if current_time - last_check_time < time_interval * 60:
            #print(f"–ü–∞—Ä–∞ {pair} —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∞—Å—å –Ω–µ–¥–∞–≤–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            return  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–∞—Ä–∞ —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–ª–∞—Å—å –Ω–µ–¥–∞–≤–Ω–æ

    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM:SS
    current_datetime = datetime.datetime.now()
    historical_time = (current_datetime - datetime.timedelta(minutes=time_interval)).strftime("%H:%M:%S")

    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Ü–µ–Ω—É –¥–ª—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    historical_time = get_nearest_available_price(prices, historical_time)
    historical_price_data = prices.get(historical_time)

    # –ï—Å–ª–∏ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Ü–µ–Ω—ã, –≤—ã—Ö–æ–¥–∏–º
    if not historical_price_data:
        return

    current_price = price_now
    historical_price = historical_price_data[0]

    if historical_price == 0:
        return  # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å

    # –†–∞—Å—á—ë—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
    change_percent = ((current_price - historical_price) / historical_price) * 100

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è "—Ä–æ—Å—Ç >= –ø–æ—Ä–æ–≥–∞"
    if change_percent >= percent_up:
        message = (
            f"üè¶ Binance - ‚è±Ô∏è {time_interval}M - <code>{pair}</code>\n"
            f"üîÑ {buttons_text['Percentage_of_growth'][f'{lang}']}: ‚¨ÜÔ∏è {change_percent:.2f}%\n"
            f"üíµ {message_text['Current_Price'][f'{lang}']}: {current_price}"
        )
        try:
            await bot.send_message(chat_id=telegram_id, text=message, reply_markup=await kb_pair_coinglass(pair))

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã
            user_alerts[pair] = current_time
            await redis_client.set(user_alert_key, json.dumps(user_alerts), ex=time_interval * 60)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TTL

        except TelegramAPIError as e:
            print('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è "–ø–∞–¥–µ–Ω–∏–µ >= –ø–æ—Ä–æ–≥–∞"
    elif change_percent <= -percent_down:
        message = (
            f"üè¶ Binance - ‚è±Ô∏è {time_interval}M - <code>{pair}</code>\n"
            f"üîÑ {buttons_text['Drawdown_percentage'][f'{lang}']}: ‚¨áÔ∏è {change_percent:.2f}%\n"
            f"üíµ {message_text['Current_Price'][f'{lang}']}: {current_price}"
        )
        try:
            await bot.send_message(chat_id=telegram_id, text=message, reply_markup=await kb_pair_coinglass(pair))

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã
            user_alerts[pair] = current_time
            await redis_client.set(user_alert_key, json.dumps(user_alerts), ex=time_interval * 60)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TTL

        except TelegramAPIError as e:
            print('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è')
