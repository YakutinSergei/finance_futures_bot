import json
import time
import datetime
from typing import Dict, List
import logging
from aiogram.exceptions import TelegramAPIError

from create_bot import bot
from data_base.lexicon import message_text, buttons_text
from keyboards.inline_keyboards import kb_pair_coinglass

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def check_alerts(
        users: List[Dict],
        redis_data: Dict[str, Dict],
):
    """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä—ã–Ω–æ—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        logger.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤")
        if not users:
            logger.warning("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç")
            return

        if not redis_data:
            logger.warning("–î–∞–Ω–Ω—ã–µ –∏–∑ Redis –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return

        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ {len(redis_data)} –ø–∞—Ä –∏–∑ Redis")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        current_datetime = datetime.datetime.now()
        current_time_str = current_datetime.strftime("%H:%M")

        for user in users:
            if user['role'] != 'free':
                try:
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if not all(key in user for key in ['time_interval', 'percent_up', 'percent_down', 'telegram_id']):
                        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user}")
                        continue

                    time_int = user['time_interval']
                    percent_up = user['percent_up']
                    percent_down = user['percent_down']
                    telegram_id = user['telegram_id']
                    lang = user['lang']

                    # –í—ã—á–∏—Å–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è (—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è - time_int –º–∏–Ω—É—Ç)
                    historical_datetime = current_datetime - datetime.timedelta(minutes=time_int)
                    historical_time_str = historical_datetime.strftime("%H:%M")

                    for pair, prices in redis_data.items():
                        try:
                            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
                            current_price_data = prices.get(current_time_str)
                            if not current_price_data or len(current_price_data) < 1 or current_price_data[0] == 0:
                                logger.debug(f"–ù–µ—Ç —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è –ø–∞—Ä—ã {pair} –≤ {current_time_str}")
                                continue

                            current_price = current_price_data[0]

                            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Ü–µ–Ω—É
                            historical_price_data = prices.get(historical_time_str)
                            if not historical_price_data or historical_price_data[0] == 0:
                                logger.debug(
                                    f"–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —Ü–µ–Ω—ã –¥–ª—è –ø–∞—Ä—ã {pair} –∑–∞ {time_int} –º–∏–Ω (–∏—â–µ–º {historical_time_str})")
                                continue

                            historical_price = historical_price_data[0]

                            # –†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
                            try:
                                change_percent = ((current_price - historical_price) / historical_price) * 100
                            except ZeroDivisionError:
                                logger.error(f"–î–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –¥–ª—è –ø–∞—Ä—ã {pair}")
                                continue
                            print(f'{change_percent=}')
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
                            try:
                                if change_percent >= percent_up:
                                    message = (
                                        f"üè¶ Binance - ‚è±Ô∏è {time_int}M - <code>{pair}</code>\n"
                                        f"üîÑ {buttons_text['Percentage_of_growth'][f'{lang}']}:‚¨ÜÔ∏è {change_percent:.2f}%\n"
                                        f"üíµ {message_text['Current_Price'][f'{lang}']}: {current_price}"
                                    )
                                    await bot.send_message(
                                        chat_id=telegram_id,
                                        text=message,
                                        reply_markup=await kb_pair_coinglass(pair)
                                    )
                                    logger.info(f"–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ —Ä–æ—Å—Ç–µ {pair} –¥–ª—è {telegram_id}")

                                elif change_percent <= -percent_down:
                                    message = (
                                        f"üè¶ Binance - ‚è±Ô∏è {time_int}M - <code>{pair}</code>\n"
                                        f"üîÑ {buttons_text['Drawdown_percentage'][f'{lang}']}: ‚¨áÔ∏è{change_percent:.2f}%\n"
                                        f"üíµ {message_text['Current_Price'][f'{lang}']}: {current_price}"
                                    )
                                    await bot.send_message(
                                        chat_id=telegram_id,
                                        text=message,
                                        reply_markup=await kb_pair_coinglass(pair)
                                    )
                                    logger.info(f"–û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ –ø–∞–¥–µ–Ω–∏–∏ {pair} –¥–ª—è {telegram_id}")

                            except TelegramAPIError as e:
                                logger.error(f"–û—à–∏–±–∫–∞ Telegram –¥–ª—è {telegram_id}: {str(e)}")
                                break
                            except Exception as e:
                                logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")

                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞—Ä—ã {pair}: {str(e)}", exc_info=True)

                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('telegram_id', 'unknown')}: {str(e)}",
                                 exc_info=True)

    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ check_alerts: {str(e)}", exc_info=True)
    finally:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤")


def is_valid_period(text: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 30

    :param text: –í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    :return: True –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º, –∏–Ω–∞—á–µ False
    """
    try:
        number = int(text)
        return 1 <= number <= 30
    except ValueError:
        return False


def validate_percent_input(text: str) -> tuple[bool, float | None, str | None]:
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏

    :param text: –í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç
    :return: (–≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å, —á–∏—Å–ª–æ –∏–ª–∏ None, —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ None)
    """
    try:
        value = float(text)
    except ValueError:
        return False, None, "not_a_number"

    if value < 2.0:
        return False, None, "too_small"
    elif value > 100.0:
        return False, None, "too_large"

    return True, value, None

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
def get_nearest_available_price(prices, target_time):
    """–ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à–µ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Redis, –º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥"""
    closest_time = target_time
    max_retries = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (10 —Å–µ–∫—É–Ω–¥)

    for _ in range(max_retries):
        if closest_time in prices:
            return closest_time
        # –£–º–µ–Ω—å—à–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–¥–Ω—É —Å–µ–∫—É–Ω–¥—É
        closest_time = (datetime.datetime.strptime(closest_time, "%H:%M:%S") - datetime.timedelta(seconds=1)).strftime("%H:%M:%S")

    return None  # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤—Ä–µ–º—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 10 —Å–µ–∫—É–Ω–¥, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å-–∫—ç—à, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö—Ä–∞–Ω–∏–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
# –§–æ—Ä–º–∞—Ç: {telegram_id: {pair: timestamp_of_last_send}}
sent_alerts_cache: dict[int, dict[str, float]] = {}

async def check_alert_for_user(alert_dict: dict, pair: str, prices: dict, price_now: float):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –¥–∞–Ω–Ω–æ–π –ø–∞—Ä–µ.
    –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –¥–ª—è –æ–¥–Ω–æ–π –ø–∞—Ä—ã –Ω–∞ 5 –º–∏–Ω—É—Ç (–±–µ–∑ Redis).
    """

    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è –∞–ª–µ—Ä—Ç–∞
        user_data = alert_dict['user']
        telegram_id = user_data['telegram_id']  # Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = user_data['language']  # –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "en", "ru")

        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å–∞–º–æ–≥–æ –∞–ª–µ—Ä—Ç–∞
        time_interval = alert_dict['time_interval']  # –ò–Ω—Ç–µ—Ä–≤–∞–ª (–≤ –º–∏–Ω—É—Ç–∞—Ö) –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω—ã
        percent_up = alert_dict['percent_up']        # –ü–æ—Ä–æ–≥ –ø–æ–≤—ã—à–µ–Ω–∏—è (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
        percent_down = alert_dict['percent_down']    # –ü–æ—Ä–æ–≥ –ø–æ–Ω–∏–∂–µ–Ω–∏—è (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)

        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        current_datetime = datetime.datetime.now()

        # –í—Ä–µ–º—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–∑–∞–¥ (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–µ)
        historical_time = (current_datetime - datetime.timedelta(minutes=time_interval)).strftime("%H:%M:%S")


        # –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è, –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
        historical_time = get_nearest_available_price(prices, historical_time)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ü–µ–Ω—ã –∏–∑ Redis –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        historical_price_data = prices.get(historical_time)

        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã ‚Äî –≤—ã—Ö–æ–¥–∏–º
        if not historical_price_data:
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫—É—é —Ü–µ–Ω—É
        current_price = price_now
        historical_price = historical_price_data[0]

        # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        if historical_price == 0:
            return

        # –†–∞—Å—á—ë—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
        change_percent = ((current_price - historical_price) / historical_price) * 100

        # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏)
        current_time = time.time()

        # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –∫—ç—à–∞ —Å–ª–æ–≤–∞—Ä—å –ø–∞—Ä, –∫–æ—Ç–æ—Ä—ã–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_alerts = sent_alerts_cache.get(telegram_id, {})

        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ —ç—Ç–æ–π –ø–∞—Ä–µ (–µ—Å–ª–∏ –±—ã–ª–æ)
        last_sent_time = user_alerts.get(pair)

        # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ —ç—Ç–æ–π –ø–∞—Ä–µ —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–µ 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
        if last_sent_time and current_time - last_sent_time < 5 * 60:
            return


        # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –≤—ã—à–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ ‚Äî —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä–æ—Å—Ç
        if change_percent >= percent_up:
            message = (
                f"üè¶ Binance - ‚è±Ô∏è {time_interval}M - <code>{pair}</code>\n"
                f"üîÑ {buttons_text['Percentage_of_growth'][f'{lang}']}: ‚¨ÜÔ∏è {change_percent:.2f}%\n"
                f"üíµ {message_text['Current_Price'][f'{lang}']}: {current_price}"
            )

        # –ï—Å–ª–∏ —Ü–µ–Ω–∞ —É–ø–∞–ª–∞ –Ω–∏–∂–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞ ‚Äî —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø–∞–¥–µ–Ω–∏–µ
        elif change_percent <= -percent_down:
            message = (
                f"üè¶ Binance - ‚è±Ô∏è {time_interval}M - <code>{pair}</code>\n"
                f"üîÑ {buttons_text['Drawdown_percentage'][f'{lang}']}: ‚¨áÔ∏è {change_percent:.2f}%\n"
                f"üíµ {message_text['Current_Price'][f'{lang}']}: {current_price}"
            )

        # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ ‚Äî –≤—ã—Ö–æ–¥–∏–º
        else:
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram
        try:
            await bot.send_message(
                chat_id=telegram_id,
                text=message,
                reply_markup=await kb_pair_coinglass(pair)  # –ö–Ω–æ–ø–∫–∏ –ø–æ –ø–∞—Ä–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Å—ã–ª–∫–∞ –Ω–∞ Coinglass)
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —ç—Ç–æ–π –ø–∞—Ä–µ
            if telegram_id not in sent_alerts_cache:
                sent_alerts_cache[telegram_id] = {}  # –°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ —Ç–µ–∫—É—â–µ–π –ø–∞—Ä–µ
            sent_alerts_cache[telegram_id][pair] = current_time

        except TelegramAPIError:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞) ‚Äî –ª–æ–≥–∏—Ä—É–µ–º
            logger.warning(f"[check_alert_for_user] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id}")

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –ª—é–±—ã–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
        logger.exception(f"[check_alert_for_user] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–ª–µ—Ä—Ç–∞: {e}")
